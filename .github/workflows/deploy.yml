name: Deploy on server

on:
  push:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  preprocess:
    name: Preprocess before deploy server
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    outputs:
      rawdata-uploaded: ${{ steps.rawdata_flag.outputs.uploaded }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Cache preprocess
        id: cache-preprocess
        uses: actions/cache@v3
        with:
          path: |
            backend/static/anim
            frontend/types/schemas
          key: preprocess-${{ runner.os }}-${{ hashFiles('preprocess/uv.lock', 'preprocess/**/*.py') }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install node dependencies
        run: pnpm install

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "preprocess/uv.lock"

      - name: Install the project
        if: steps.cache-preprocess.outputs.cache-hit != 'true'
        run: |
          cd ./preprocess
          uv sync --locked --all-extras --dev

      - name: Download rawdata from R2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          R2_ENDPOINT: https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
        run: |
          aws s3 --endpoint-url $R2_ENDPOINT cp \
            s3://${{ secrets.R2_BUCKET_NAME }}/${{ secrets.R2_OBJECT_KEY }} \
            rawdata.tar.zst

      - name: Cache rawdata
        id: cache-rawdata
        uses: actions/cache@v3
        with:
          path: rawdata.tar.zst
          key: rawdata-${{ hashFiles('rawdata.tar.zst') }}

      - name: Extract rawdata archive
        if: steps.cache-rawdata.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./preprocess/preprocess/rawdata
          tar -I zstd -xvf rawdata.tar.zst

      - name: Run preprocess
        id: preprocess_run
        if: steps.cache-preprocess.outputs.cache-hit != 'true' && steps.cache-rawdata.outputs.cache-hit != 'true'
        run: |
          pnpm run build-preprocess

      - name: Upload frontend schemas
        if: steps.preprocess_run.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-schemas
          path: frontend/types/schemas

      - name: Upload rawdata
        if: steps.preprocess_run.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: backend-rawdata
          path: |
            backend/static/anim
            backend/static/terrain

      - name: Set rawdata flag
        id: rawdata_flag
        run: |
          if [ "${{ steps.cache-preprocess.outputs.cache-hit }}" = 'true' ]; then
            echo "uploaded=false" >> "$GITHUB_OUTPUT"
          else
            echo "uploaded=true"  >> "$GITHUB_OUTPUT"
          fi

  build_frontend:
    needs: preprocess
    name: Build Next.js Frontend
    runs-on: ubuntu-latest
    environment: FIREBASE
    env:
      NEXT_PUBLIC_FIREBASE_API_KEY: ${{ vars.NEXT_PUBLIC_FIREBASE_API_KEY }}
      NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ vars.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
      NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ vars.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
      NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ vars.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
      NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ vars.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
      NEXT_PUBLIC_FIREBASE_APP_ID: ${{ vars.NEXT_PUBLIC_FIREBASE_APP_ID }}
      NEXT_PUBLIC_API_BASE_URL: "https://api.webditor.net"
    strategy:
      matrix:
        node-version: [20]
    outputs:
      frontend-uploaded: ${{ steps.rawdata_flag.outputs.uploaded }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - uses: actions/cache@v4
        id: cache-frontend
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/frontend/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('frontend/pnpm-lock.yaml') }}-${{ hashFiles('frontend/**/*.ts', 'frontend/**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('frontend/pnpm-lock.yaml') }}

      - name: Download processed schemas
        if: steps.cache-frontend.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v4
        with:
          name: frontend-schemas
          path: frontend/types/schemas

      - name: Install pnpm
        if: steps.cache-frontend.outputs.cache-hit != 'true'
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Use Node.js ${{ matrix.node-version }}
        if: steps.cache-frontend.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install dependencies
        if: steps.cache-frontend.outputs.cache-hit != 'true'
        run: |
          pnpm install -r

      - name: Build App
        if: steps.cache-frontend.outputs.cache-hit != 'true'
        run: pnpm run build

      - name: Upload frontend build artifact
        if: steps.cache-frontend.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: |
            frontend/.next
            frontend/public
          include-hidden-files: true

      - name: Set frontend flag
        id: rawdata_flag
        run: |
          if [ "${{ steps.cache-frontend.outputs.cache-hit }}" = 'true' ]; then
            echo "uploaded=false" >> "$GITHUB_OUTPUT"
          else
            echo "uploaded=true"  >> "$GITHUB_OUTPUT"
          fi

  Deploy:
    needs: [preprocess, build_frontend]
    runs-on: self-hosted
    steps:
      - name: Download built frontend
        if: needs.build_frontend.outputs.frontend-uploaded == 'true'
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ${{ secrets.LIVE_SERVER_PATH }}/frontend

      - name: Download Backend Static Anim Images
        if: needs.preprocess.outputs.rawdata-uploaded == 'true'
        uses: actions/download-artifact@v4
        with:
          name: backend-rawdata
          path: ${{ secrets.LIVE_SERVER_PATH}}/backend/static

      - name: Pull latest code
        run: |
          cd ${{ secrets.LIVE_SERVER_PATH }}
          git pull origin master

      - name: Deploy
        run: |
          net stop Webditor
          net start Webditor
