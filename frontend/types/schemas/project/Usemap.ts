import { z } from "zod";

export const UsemapSchema = z.object({
  terrain: z
    .object({
      size: z.object({ height: z.number().int(), width: z.number().int() }),
      tileset: z.enum([
        "Ashworld",
        "Badlands",
        "Desert",
        "Ice",
        "Installation",
        "Jungle",
        "Platform",
        "Twilight",
      ]),
    })
    .describe(
      "Raw terrain model.\n\n`RawTerrain` only have non converted tile data(e.g. tile image), because chk doesn't need\nto know how tile renders.",
    ),
  player: z.array(
    z.object({
      id: z.number().int().default(0),
      name: z.string().default("Object"),
      color: z.number().int(),
      rgb_color: z.array(z.any()).min(3).max(3),
      player_type: z.enum([
        "Inactive",
        "Computer (game)",
        "Occupied By Human Player",
        "Rescue",
        "Unused",
        "Computer",
        "Human (Open Slot)",
        "Neutral",
        "Closed Slot",
      ]),
      race: z.enum([
        "Zerg",
        "Terran",
        "Protoss",
        "Invalid (Independant)",
        "Invalid (Neutral)",
        "User Selectable",
        "Random",
        "Inactive",
      ]),
      force: z.number().int().gte(0).lt(4).default(0),
    }),
  ),
  string: z.array(z.object({ id: z.number().int(), content: z.string() })),
  validation: z.object({ vcod: z.string(), ver: z.string() }),
  unit_properties: z.array(
    z
      .object({
        id: z.number().int().default(0),
        name: z.string().default("Object"),
        special_properties: z.number().int(),
        valid_properties: z.number().int(),
        owner: z.number().int().lte(1).default(0),
        hit_point_percent: z.number().int().gte(0).lte(100).default(1),
        shield_point_percent: z.number().int().gte(0).lte(100).default(1),
        energy_point_percent: z.number().int().gte(0).lte(100).default(1),
        resource_amount: z.number().int(),
        units_in_hangar: z.number().int(),
        flags: z.number().int(),
      })
      .describe("Create units with properties trigger used."),
  ),
  raw_triggers: z
    .object({
      id: z.number().int().default(0),
      name: z.string().default("RawTrigger"),
      raw_data: z.string(),
    })
    .describe(
      "Bytes-based raw trigger section(e.g. TRIG and MBRF)\n\nWebditor uses `eudplib` for trigger programming, so every triggers need to written for eudplib. But\nuser can use his own trigger on map thanks to eudplib supports it. So TRIG and MBRF sections are used\nto only compile map.",
    ),
  raw_mbrf_triggers: z
    .object({
      id: z.number().int().default(0),
      name: z.string().default("RawTrigger"),
      raw_data: z.string(),
    })
    .describe(
      "Bytes-based raw trigger section(e.g. TRIG and MBRF)\n\nWebditor uses `eudplib` for trigger programming, so every triggers need to written for eudplib. But\nuser can use his own trigger on map thanks to eudplib supports it. So TRIG and MBRF sections are used\nto only compile map.",
    ),
  force: z.array(
    z.object({
      id: z.number().int().default(0),
      name: z.string().default("Object"),
      properties: z.number().int(),
    }),
  ),
  scenario_property: z.object({
    name: z.object({ id: z.number().int(), content: z.string() }),
    description: z.object({ id: z.number().int(), content: z.string() }),
  }),
  entities: z.array(
    z.object({
      name: z.string(),
      id: z.number().int(),
      type: z.enum(["folder", "file"]),
      preview: z.union([z.number().int(), z.null()]).default(null),
      parent_id: z.number().int().default(0),
      data: z
        .union([
          z
            .object({
              id: z.number().int().default(0),
              name: z.string().default("Object"),
              transform: z
                .object({
                  id: z.number().int().default(0),
                  name: z.string().default("Object"),
                  position: z.object({
                    x: z.number().int().default(0),
                    y: z.number().int().default(0),
                  }),
                  size: z.object({
                    left: z.number().int(),
                    top: z.number().int(),
                    right: z.number().int(),
                    bottom: z.number().int(),
                  }),
                })
                .describe("An entity component can have spatial data."),
              kind: z.enum(["Unit", "Sprite", "Location", "Tile", "Mask"]),
            })
            .describe("Placeable `object`."),
          z
            .object({
              id: z.number().int().default(0),
              name: z.string().default("Object"),
              transform: z
                .object({
                  id: z.number().int().default(0),
                  name: z.string().default("Object"),
                  position: z.object({
                    x: z.number().int().default(0),
                    y: z.number().int().default(0),
                  }),
                  size: z.object({
                    left: z.number().int(),
                    top: z.number().int(),
                    right: z.number().int(),
                    bottom: z.number().int(),
                  }),
                })
                .describe("An entity component can have spatial data."),
              kind: z
                .enum(["Unit", "Sprite", "Location", "Tile", "Mask"])
                .default("Unit"),
              serial_number: z
                .union([z.number().int(), z.null()])
                .default(null),
              use_default: z.boolean().default(true),
              unit_definition: z
                .object({
                  id: z.number().int().default(0),
                  name: z.string().default("Definition"),
                  ref_type: z.literal("Definition").default("Definition"),
                  use_default: z.boolean().default(true),
                  specification: z.object({
                    name: z.string().default("Unit Specification"),
                    graphics: z.object({
                      id: z.number().int().default(0),
                      name: z.string().default("Definition"),
                      ref_type: z.literal("Definition").default("Definition"),
                      sprite: z.object({
                        id: z.number().int().default(0),
                        name: z.string().default("Definition"),
                        ref_type: z.literal("Definition").default("Definition"),
                        image: z.object({
                          id: z.number().int().default(0),
                          name: z.string().default("Definition"),
                          ref_type: z
                            .literal("Definition")
                            .default("Definition"),
                          graphic: z.number().int(),
                          turnable: z.boolean(),
                          clickable: z.boolean(),
                          use_full_iscript: z.boolean(),
                          draw_if_cloaked: z.boolean(),
                          draw_function: z.number().int(),
                          remapping: z.number().int(),
                          iscript_id: z.number().int(),
                          shield_overlay: z.number().int(),
                          attack_overlay: z.number().int(),
                          damage_overlay: z.number().int(),
                          special_overlay: z.number().int(),
                          landing_dust_overlay: z.number().int(),
                          lift_off_overlay: z.number().int(),
                        }),
                        health_bar_id: z.union([z.number().int(), z.null()]),
                        selection_circle_image_id: z.union([
                          z.number().int(),
                          z.null(),
                        ]),
                        selection_circle_offset: z.union([
                          z.number().int(),
                          z.null(),
                        ]),
                      }),
                      top_speed: z.number().int(),
                      acceleration: z.number().int(),
                      halt_distance: z.number().int(),
                      turn_radius: z.number().int(),
                      unused: z.number().int(),
                      move_control: z.number().int(),
                    }),
                    subunit1: z.number().int(),
                    subunit2: z.number().int(),
                    infestation: z.union([z.number().int(), z.null()]),
                    construction_animation: z.number().int(),
                    unit_direction: z.number().int(),
                    portrait: z.number().int(),
                    label: z.number().int(),
                  }),
                  stats: z.object({
                    name: z.string().default("Unit Status"),
                    hit_points: z.object({
                      current: z.number().int().gte(0).default(0),
                      max: z.number().int().gte(0).default(0),
                    }),
                    shield_enable: z.boolean(),
                    shield_points: z.object({
                      current: z.number().int().gte(0).default(0),
                      max: z.number().int().gte(0).default(0),
                    }),
                    energy_points: z.object({
                      current: z.number().int().gte(0).default(0),
                      max: z.number().int().gte(0).default(0),
                    }),
                    armor_points: z.number().int().lt(256).default(0),
                    armor_upgrade: z.number().int(),
                    rank: z.number().int(),
                    elevation_level: z.number().int(),
                  }),
                  weapons: z.object({
                    ground_weapon: z.union([
                      z.object({
                        id: z.number().int().default(0),
                        name: z.string().default("Definition"),
                        ref_type: z.literal("Definition").default("Definition"),
                        damage: z.object({
                          amount: z.number().int().gte(0).lte(65536),
                          bonus: z.number().int().gte(0).lte(65536),
                          factor: z.number().int(),
                        }),
                        bullet: z.object({
                          behaviour: z.number().int(),
                          remove_after: z.number().int(),
                          attack_angle: z.number().int(),
                          launch_spin: z.number().int(),
                          x_offset: z.number().int(),
                          y_offset: z.number().int(),
                        }),
                        splash: z.object({
                          inner: z.number().int(),
                          medium: z.number().int(),
                          outer: z.number().int(),
                        }),
                        cooldown: z.number().int(),
                        upgrade: z.number().int(),
                        weapon_type: z.number().int(),
                        explosion_type: z.number().int(),
                        target_flags: z.number().int(),
                        error_message: z.number().int(),
                        icon: z.number().int(),
                        graphics: z.number().int(),
                      }),
                      z.null(),
                    ]),
                    max_ground_hits: z.number().int(),
                    air_weapon: z.union([
                      z.object({
                        id: z.number().int().default(0),
                        name: z.string().default("Definition"),
                        ref_type: z.literal("Definition").default("Definition"),
                        damage: z.object({
                          amount: z.number().int().gte(0).lte(65536),
                          bonus: z.number().int().gte(0).lte(65536),
                          factor: z.number().int(),
                        }),
                        bullet: z.object({
                          behaviour: z.number().int(),
                          remove_after: z.number().int(),
                          attack_angle: z.number().int(),
                          launch_spin: z.number().int(),
                          x_offset: z.number().int(),
                          y_offset: z.number().int(),
                        }),
                        splash: z.object({
                          inner: z.number().int(),
                          medium: z.number().int(),
                          outer: z.number().int(),
                        }),
                        cooldown: z.number().int(),
                        upgrade: z.number().int(),
                        weapon_type: z.number().int(),
                        explosion_type: z.number().int(),
                        target_flags: z.number().int(),
                        error_message: z.number().int(),
                        icon: z.number().int(),
                        graphics: z.number().int(),
                      }),
                      z.null(),
                    ]),
                    max_air_hits: z.number().int(),
                    target_acquisition_range: z.number().int(),
                    sight_range: z.number().int(),
                    special_ability_flags: z.number().int(),
                  }),
                  ai: z.object({
                    name: z.string().default("Unit AI"),
                    computer_idle: z.number().int(),
                    human_idle: z.number().int(),
                    return_to_idle: z.number().int(),
                    attack_unit: z.number().int(),
                    attack_and_move: z.number().int(),
                    internal: z.number().int(),
                    right_click: z.number().int(),
                  }),
                  sound: z.object({
                    name: z.string().default("Unit Sound"),
                    ready: z.union([z.number().int(), z.null()]),
                    what_start: z.number().int(),
                    what_end: z.number().int(),
                    piss_start: z.union([z.number().int(), z.null()]),
                    piss_end: z.union([z.number().int(), z.null()]),
                    yes_start: z.union([z.number().int(), z.null()]),
                    yes_end: z.union([z.number().int(), z.null()]),
                  }),
                  size: z.object({
                    name: z.string().default("Unit Size"),
                    size_type: z.number().int(),
                    placement_box_size: z.object({
                      height: z.number().int(),
                      width: z.number().int(),
                    }),
                    bounds: z.object({
                      left: z.number().int(),
                      top: z.number().int(),
                      right: z.number().int(),
                      bottom: z.number().int(),
                    }),
                    addon_position: z.union([
                      z.object({
                        x: z.number().int().default(0),
                        y: z.number().int().default(0),
                      }),
                      z.null(),
                    ]),
                  }),
                  cost: z.object({
                    name: z.string().default("Unit Cost"),
                    cost: z.object({
                      mineral: z.number().int().gte(0).default(0),
                      gas: z.number().int().gte(0).default(0),
                      time: z.number().int().gte(0).default(0),
                    }),
                    build_score: z.number().int(),
                    destroy_score: z.number().int(),
                    is_broodwar: z.boolean(),
                    supply: z.object({
                      required: z.number().int(),
                      provided: z.number().int(),
                    }),
                    space: z.object({
                      required: z.number().int(),
                      provided: z.number().int(),
                    }),
                  }),
                })
                .describe("Definition of unit specification."),
              owner: z
                .object({
                  id: z.number().int().default(0),
                  name: z.string().default("Object"),
                  color: z.number().int(),
                  rgb_color: z.array(z.any()).min(3).max(3),
                  player_type: z.enum([
                    "Inactive",
                    "Computer (game)",
                    "Occupied By Human Player",
                    "Rescue",
                    "Unused",
                    "Computer",
                    "Human (Open Slot)",
                    "Neutral",
                    "Closed Slot",
                  ]),
                  race: z.enum([
                    "Zerg",
                    "Terran",
                    "Protoss",
                    "Invalid (Independant)",
                    "Invalid (Neutral)",
                    "User Selectable",
                    "Random",
                    "Inactive",
                  ]),
                  force: z.number().int().gte(0).lt(4).default(0),
                })
                .optional(),
              resource_amount: z.number().int().default(0),
              hangar: z.number().int().default(0),
              unit_state: z.number().int().default(0),
              relation_type: z.number().int().default(0),
              related_unit: z.number().int().default(0),
              special_properties: z.number().int().default(0),
              valid_properties: z.number().int().default(0),
            })
            .describe(
              "Unit placed on map.\n\nThe entity means what placeable on map, so every `Unit` which herit `Entity` is placed unit.\nIf you looking for specificaiton of unit like `Max HP`, `Size`, see `UnitDefinition`.",
            ),
          z
            .object({
              id: z.number().int().default(0),
              name: z.string().default("Object"),
              transform: z
                .object({
                  id: z.number().int().default(0),
                  name: z.string().default("Object"),
                  position: z.object({
                    x: z.number().int().default(0),
                    y: z.number().int().default(0),
                  }),
                  size: z.object({
                    left: z.number().int(),
                    top: z.number().int(),
                    right: z.number().int(),
                    bottom: z.number().int(),
                  }),
                })
                .describe("An entity component can have spatial data."),
              kind: z
                .enum(["Unit", "Sprite", "Location", "Tile", "Mask"])
                .default("Sprite"),
              owner: z.object({
                id: z.number().int().default(0),
                name: z.string().default("Object"),
                color: z.number().int(),
                rgb_color: z.array(z.any()).min(3).max(3),
                player_type: z.enum([
                  "Inactive",
                  "Computer (game)",
                  "Occupied By Human Player",
                  "Rescue",
                  "Unused",
                  "Computer",
                  "Human (Open Slot)",
                  "Neutral",
                  "Closed Slot",
                ]),
                race: z.enum([
                  "Zerg",
                  "Terran",
                  "Protoss",
                  "Invalid (Independant)",
                  "Invalid (Neutral)",
                  "User Selectable",
                  "Random",
                  "Inactive",
                ]),
                force: z.number().int().gte(0).lt(4).default(0),
              }),
              flags: z.number().int(),
              definition: z.object({
                id: z.number().int().default(0),
                name: z.string().default("Definition"),
                ref_type: z.literal("Definition").default("Definition"),
                image: z.object({
                  id: z.number().int().default(0),
                  name: z.string().default("Definition"),
                  ref_type: z.literal("Definition").default("Definition"),
                  graphic: z.number().int(),
                  turnable: z.boolean(),
                  clickable: z.boolean(),
                  use_full_iscript: z.boolean(),
                  draw_if_cloaked: z.boolean(),
                  draw_function: z.number().int(),
                  remapping: z.number().int(),
                  iscript_id: z.number().int(),
                  shield_overlay: z.number().int(),
                  attack_overlay: z.number().int(),
                  damage_overlay: z.number().int(),
                  special_overlay: z.number().int(),
                  landing_dust_overlay: z.number().int(),
                  lift_off_overlay: z.number().int(),
                }),
                health_bar_id: z.union([z.number().int(), z.null()]),
                selection_circle_image_id: z.union([
                  z.number().int(),
                  z.null(),
                ]),
                selection_circle_offset: z.union([z.number().int(), z.null()]),
              }),
            })
            .describe("Placed Sprite Entity."),
          z.object({
            id: z.number().int().default(0),
            name: z.string().default("Object"),
            transform: z
              .object({
                id: z.number().int().default(0),
                name: z.string().default("Object"),
                position: z.object({
                  x: z.number().int().default(0),
                  y: z.number().int().default(0),
                }),
                size: z.object({
                  left: z.number().int(),
                  top: z.number().int(),
                  right: z.number().int(),
                  bottom: z.number().int(),
                }),
              })
              .describe("An entity component can have spatial data."),
            kind: z.enum(["Unit", "Sprite", "Location", "Tile", "Mask"]),
            group: z.number().int(),
            tile_id: z.number().int(),
          }),
          z.object({
            id: z.number().int().default(0),
            name: z.string().default("Object"),
            transform: z
              .object({
                id: z.number().int().default(0),
                name: z.string().default("Object"),
                position: z.object({
                  x: z.number().int().default(0),
                  y: z.number().int().default(0),
                }),
                size: z.object({
                  left: z.number().int(),
                  top: z.number().int(),
                  right: z.number().int(),
                  bottom: z.number().int(),
                }),
              })
              .describe("An entity component can have spatial data."),
            kind: z.enum(["Unit", "Sprite", "Location", "Tile", "Mask"]),
            elevation_flags: z.number().int(),
          }),
          z
            .object({
              id: z.number().int().default(0),
              name: z.string().default("Object"),
              transform: z
                .object({
                  id: z.number().int().default(0),
                  name: z.string().default("Object"),
                  position: z.object({
                    x: z.number().int().default(0),
                    y: z.number().int().default(0),
                  }),
                  size: z.object({
                    left: z.number().int(),
                    top: z.number().int(),
                    right: z.number().int(),
                    bottom: z.number().int(),
                  }),
                })
                .describe("An entity component can have spatial data."),
              kind: z.enum(["Unit", "Sprite", "Location", "Tile", "Mask"]),
              flags: z.number().int(),
            })
            .describe("Fog of War"),
          z.null(),
        ])
        .default(null),
    }),
  ),
  assets: z.array(
    z.object({
      name: z.string(),
      id: z.number().int(),
      type: z.enum(["folder", "file"]),
      preview: z.union([z.number().int(), z.null()]).default(null),
      parent_id: z.number().int().default(0),
      data: z
        .union([
          z
            .object({
              id: z.number().int().default(0),
              name: z.string().default("Definition"),
              ref_type: z.literal("Definition").default("Definition"),
            })
            .describe("Object for saving data to class."),
          z
            .object({
              id: z.number().int().default(0),
              name: z.string().default("Definition"),
              ref_type: z.literal("Definition").default("Definition"),
              use_default: z.boolean().default(true),
              specification: z.object({
                name: z.string().default("Unit Specification"),
                graphics: z.object({
                  id: z.number().int().default(0),
                  name: z.string().default("Definition"),
                  ref_type: z.literal("Definition").default("Definition"),
                  sprite: z.object({
                    id: z.number().int().default(0),
                    name: z.string().default("Definition"),
                    ref_type: z.literal("Definition").default("Definition"),
                    image: z.object({
                      id: z.number().int().default(0),
                      name: z.string().default("Definition"),
                      ref_type: z.literal("Definition").default("Definition"),
                      graphic: z.number().int(),
                      turnable: z.boolean(),
                      clickable: z.boolean(),
                      use_full_iscript: z.boolean(),
                      draw_if_cloaked: z.boolean(),
                      draw_function: z.number().int(),
                      remapping: z.number().int(),
                      iscript_id: z.number().int(),
                      shield_overlay: z.number().int(),
                      attack_overlay: z.number().int(),
                      damage_overlay: z.number().int(),
                      special_overlay: z.number().int(),
                      landing_dust_overlay: z.number().int(),
                      lift_off_overlay: z.number().int(),
                    }),
                    health_bar_id: z.union([z.number().int(), z.null()]),
                    selection_circle_image_id: z.union([
                      z.number().int(),
                      z.null(),
                    ]),
                    selection_circle_offset: z.union([
                      z.number().int(),
                      z.null(),
                    ]),
                  }),
                  top_speed: z.number().int(),
                  acceleration: z.number().int(),
                  halt_distance: z.number().int(),
                  turn_radius: z.number().int(),
                  unused: z.number().int(),
                  move_control: z.number().int(),
                }),
                subunit1: z.number().int(),
                subunit2: z.number().int(),
                infestation: z.union([z.number().int(), z.null()]),
                construction_animation: z.number().int(),
                unit_direction: z.number().int(),
                portrait: z.number().int(),
                label: z.number().int(),
              }),
              stats: z.object({
                name: z.string().default("Unit Status"),
                hit_points: z.object({
                  current: z.number().int().gte(0).default(0),
                  max: z.number().int().gte(0).default(0),
                }),
                shield_enable: z.boolean(),
                shield_points: z.object({
                  current: z.number().int().gte(0).default(0),
                  max: z.number().int().gte(0).default(0),
                }),
                energy_points: z.object({
                  current: z.number().int().gte(0).default(0),
                  max: z.number().int().gte(0).default(0),
                }),
                armor_points: z.number().int().lt(256).default(0),
                armor_upgrade: z.number().int(),
                rank: z.number().int(),
                elevation_level: z.number().int(),
              }),
              weapons: z.object({
                ground_weapon: z.union([
                  z.object({
                    id: z.number().int().default(0),
                    name: z.string().default("Definition"),
                    ref_type: z.literal("Definition").default("Definition"),
                    damage: z.object({
                      amount: z.number().int().gte(0).lte(65536),
                      bonus: z.number().int().gte(0).lte(65536),
                      factor: z.number().int(),
                    }),
                    bullet: z.object({
                      behaviour: z.number().int(),
                      remove_after: z.number().int(),
                      attack_angle: z.number().int(),
                      launch_spin: z.number().int(),
                      x_offset: z.number().int(),
                      y_offset: z.number().int(),
                    }),
                    splash: z.object({
                      inner: z.number().int(),
                      medium: z.number().int(),
                      outer: z.number().int(),
                    }),
                    cooldown: z.number().int(),
                    upgrade: z.number().int(),
                    weapon_type: z.number().int(),
                    explosion_type: z.number().int(),
                    target_flags: z.number().int(),
                    error_message: z.number().int(),
                    icon: z.number().int(),
                    graphics: z.number().int(),
                  }),
                  z.null(),
                ]),
                max_ground_hits: z.number().int(),
                air_weapon: z.union([
                  z.object({
                    id: z.number().int().default(0),
                    name: z.string().default("Definition"),
                    ref_type: z.literal("Definition").default("Definition"),
                    damage: z.object({
                      amount: z.number().int().gte(0).lte(65536),
                      bonus: z.number().int().gte(0).lte(65536),
                      factor: z.number().int(),
                    }),
                    bullet: z.object({
                      behaviour: z.number().int(),
                      remove_after: z.number().int(),
                      attack_angle: z.number().int(),
                      launch_spin: z.number().int(),
                      x_offset: z.number().int(),
                      y_offset: z.number().int(),
                    }),
                    splash: z.object({
                      inner: z.number().int(),
                      medium: z.number().int(),
                      outer: z.number().int(),
                    }),
                    cooldown: z.number().int(),
                    upgrade: z.number().int(),
                    weapon_type: z.number().int(),
                    explosion_type: z.number().int(),
                    target_flags: z.number().int(),
                    error_message: z.number().int(),
                    icon: z.number().int(),
                    graphics: z.number().int(),
                  }),
                  z.null(),
                ]),
                max_air_hits: z.number().int(),
                target_acquisition_range: z.number().int(),
                sight_range: z.number().int(),
                special_ability_flags: z.number().int(),
              }),
              ai: z.object({
                name: z.string().default("Unit AI"),
                computer_idle: z.number().int(),
                human_idle: z.number().int(),
                return_to_idle: z.number().int(),
                attack_unit: z.number().int(),
                attack_and_move: z.number().int(),
                internal: z.number().int(),
                right_click: z.number().int(),
              }),
              sound: z.object({
                name: z.string().default("Unit Sound"),
                ready: z.union([z.number().int(), z.null()]),
                what_start: z.number().int(),
                what_end: z.number().int(),
                piss_start: z.union([z.number().int(), z.null()]),
                piss_end: z.union([z.number().int(), z.null()]),
                yes_start: z.union([z.number().int(), z.null()]),
                yes_end: z.union([z.number().int(), z.null()]),
              }),
              size: z.object({
                name: z.string().default("Unit Size"),
                size_type: z.number().int(),
                placement_box_size: z.object({
                  height: z.number().int(),
                  width: z.number().int(),
                }),
                bounds: z.object({
                  left: z.number().int(),
                  top: z.number().int(),
                  right: z.number().int(),
                  bottom: z.number().int(),
                }),
                addon_position: z.union([
                  z.object({
                    x: z.number().int().default(0),
                    y: z.number().int().default(0),
                  }),
                  z.null(),
                ]),
              }),
              cost: z.object({
                name: z.string().default("Unit Cost"),
                cost: z.object({
                  mineral: z.number().int().gte(0).default(0),
                  gas: z.number().int().gte(0).default(0),
                  time: z.number().int().gte(0).default(0),
                }),
                build_score: z.number().int(),
                destroy_score: z.number().int(),
                is_broodwar: z.boolean(),
                supply: z.object({
                  required: z.number().int(),
                  provided: z.number().int(),
                }),
                space: z.object({
                  required: z.number().int(),
                  provided: z.number().int(),
                }),
              }),
            })
            .describe("Definition of unit specification."),
          z.object({
            id: z.number().int().default(0),
            name: z.string().default("Definition"),
            ref_type: z.literal("Definition").default("Definition"),
            damage: z.object({
              amount: z.number().int().gte(0).lte(65536),
              bonus: z.number().int().gte(0).lte(65536),
              factor: z.number().int(),
            }),
            bullet: z.object({
              behaviour: z.number().int(),
              remove_after: z.number().int(),
              attack_angle: z.number().int(),
              launch_spin: z.number().int(),
              x_offset: z.number().int(),
              y_offset: z.number().int(),
            }),
            splash: z.object({
              inner: z.number().int(),
              medium: z.number().int(),
              outer: z.number().int(),
            }),
            cooldown: z.number().int(),
            upgrade: z.number().int(),
            weapon_type: z.number().int(),
            explosion_type: z.number().int(),
            target_flags: z.number().int(),
            error_message: z.number().int(),
            icon: z.number().int(),
            graphics: z.number().int(),
          }),
          z.object({
            id: z.number().int().default(0),
            name: z.string().default("Definition"),
            ref_type: z.literal("Definition").default("Definition"),
            image: z.object({
              id: z.number().int().default(0),
              name: z.string().default("Definition"),
              ref_type: z.literal("Definition").default("Definition"),
              graphic: z.number().int(),
              turnable: z.boolean(),
              clickable: z.boolean(),
              use_full_iscript: z.boolean(),
              draw_if_cloaked: z.boolean(),
              draw_function: z.number().int(),
              remapping: z.number().int(),
              iscript_id: z.number().int(),
              shield_overlay: z.number().int(),
              attack_overlay: z.number().int(),
              damage_overlay: z.number().int(),
              special_overlay: z.number().int(),
              landing_dust_overlay: z.number().int(),
              lift_off_overlay: z.number().int(),
            }),
            health_bar_id: z.union([z.number().int(), z.null()]),
            selection_circle_image_id: z.union([z.number().int(), z.null()]),
            selection_circle_offset: z.union([z.number().int(), z.null()]),
          }),
          z.object({
            id: z.number().int().default(0),
            name: z.string().default("Definition"),
            ref_type: z.literal("Definition").default("Definition"),
            use_default: z.boolean(),
            cost: z.object({
              mineral: z.number().int().gte(0).default(0),
              gas: z.number().int().gte(0).default(0),
              time: z.number().int().gte(0).default(0),
              energy: z.number().int().gte(0).default(0),
            }),
            energy_required: z.boolean(),
            icon: z.number().int(),
            label: z.number().int(),
            race: z.number().int(),
          }),
          z.object({
            id: z.number().int().default(0),
            name: z.string().default("Definition"),
            ref_type: z.literal("Definition").default("Definition"),
            sprite: z.object({
              id: z.number().int().default(0),
              name: z.string().default("Definition"),
              ref_type: z.literal("Definition").default("Definition"),
              image: z.object({
                id: z.number().int().default(0),
                name: z.string().default("Definition"),
                ref_type: z.literal("Definition").default("Definition"),
                graphic: z.number().int(),
                turnable: z.boolean(),
                clickable: z.boolean(),
                use_full_iscript: z.boolean(),
                draw_if_cloaked: z.boolean(),
                draw_function: z.number().int(),
                remapping: z.number().int(),
                iscript_id: z.number().int(),
                shield_overlay: z.number().int(),
                attack_overlay: z.number().int(),
                damage_overlay: z.number().int(),
                special_overlay: z.number().int(),
                landing_dust_overlay: z.number().int(),
                lift_off_overlay: z.number().int(),
              }),
              health_bar_id: z.union([z.number().int(), z.null()]),
              selection_circle_image_id: z.union([z.number().int(), z.null()]),
              selection_circle_offset: z.union([z.number().int(), z.null()]),
            }),
            top_speed: z.number().int(),
            acceleration: z.number().int(),
            halt_distance: z.number().int(),
            turn_radius: z.number().int(),
            unused: z.number().int(),
            move_control: z.number().int(),
          }),
          z.object({
            id: z.number().int().default(0),
            name: z.string().default("Definition"),
            ref_type: z.literal("Definition").default("Definition"),
            label: z.number().int(),
            use_weapon_targeting: z.boolean(),
            can_be_interrupted: z.boolean(),
            can_be_queued: z.boolean(),
            targeting: z.number().int(),
            energy: z.number().int(),
            animation: z.number().int(),
            highlight: z.number().int(),
            obscured_order: z.number().int(),
          }),
          z.object({
            id: z.number().int().default(0),
            name: z.string().default("Definition"),
            ref_type: z.literal("Definition").default("Definition"),
            graphic: z.number().int(),
            turnable: z.boolean(),
            clickable: z.boolean(),
            use_full_iscript: z.boolean(),
            draw_if_cloaked: z.boolean(),
            draw_function: z.number().int(),
            remapping: z.number().int(),
            iscript_id: z.number().int(),
            shield_overlay: z.number().int(),
            attack_overlay: z.number().int(),
            damage_overlay: z.number().int(),
            special_overlay: z.number().int(),
            landing_dust_overlay: z.number().int(),
            lift_off_overlay: z.number().int(),
          }),
          z.object({
            id: z.number().int().default(0),
            name: z.string().default("Definition"),
            ref_type: z.literal("Definition").default("Definition"),
            player_maximum_level: z.array(z.number().int()).min(12).max(12),
            player_minimum_level: z.array(z.number().int()).min(12).max(12),
            default_maximum_level: z.number().int(),
            default_minimum_level: z.number().int(),
            uses_default: z.array(z.boolean()).min(12).max(12),
          }),
          z.object({
            id: z.number().int().default(0),
            name: z.string().default("Definition"),
            ref_type: z.literal("Definition").default("Definition"),
            player_availability: z.array(z.boolean()).min(12).max(12),
            player_already_researched: z.array(z.boolean()).min(12).max(12),
            default_availability: z.boolean(),
            default_already_researched: z.boolean(),
            uses_default: z.array(z.boolean()).min(12).max(12),
          }),
          z.object({
            id: z.number().int().default(0),
            name: z.string().default("Definition"),
            ref_type: z.literal("Definition").default("Definition"),
            availability: z.array(z.boolean()),
            global_availability: z.boolean(),
            uses_defaults: z.array(z.boolean()),
          }),
          z.object({
            id: z.number().int().default(0),
            name: z.string().default("Definition"),
            ref_type: z.literal("Definition").default("Definition"),
            use_default: z.boolean(),
            base_cost: z.object({
              mineral: z.number().int().gte(0).default(0),
              gas: z.number().int().gte(0).default(0),
              time: z.number().int().gte(0).default(0),
            }),
            factor_cost: z.object({
              mineral: z.number().int().gte(0).default(0),
              gas: z.number().int().gte(0).default(0),
              time: z.number().int().gte(0).default(0),
            }),
            icon: z.number().int(),
            label: z.number().int(),
            race: z.number().int(),
          }),
          z.object({
            id: z.number().int().default(0),
            name: z.string().default("Definition"),
            ref_type: z.literal("Definition").default("Definition"),
            portrait_file: z.number().int(),
            smk_change: z.number().int(),
            unknown1: z.number().int(),
          }),
          z
            .object({
              id: z.number().int().default(0),
              name: z.string().default("Object"),
              transform: z
                .object({
                  id: z.number().int().default(0),
                  name: z.string().default("Object"),
                  position: z.object({
                    x: z.number().int().default(0),
                    y: z.number().int().default(0),
                  }),
                  size: z.object({
                    left: z.number().int(),
                    top: z.number().int(),
                    right: z.number().int(),
                    bottom: z.number().int(),
                  }),
                })
                .describe("An entity component can have spatial data."),
              kind: z
                .enum(["Unit", "Sprite", "Location", "Tile", "Mask"])
                .default("Unit"),
              serial_number: z
                .union([z.number().int(), z.null()])
                .default(null),
              use_default: z.boolean().default(true),
              unit_definition: z
                .object({
                  id: z.number().int().default(0),
                  name: z.string().default("Definition"),
                  ref_type: z.literal("Definition").default("Definition"),
                  use_default: z.boolean().default(true),
                  specification: z.object({
                    name: z.string().default("Unit Specification"),
                    graphics: z.object({
                      id: z.number().int().default(0),
                      name: z.string().default("Definition"),
                      ref_type: z.literal("Definition").default("Definition"),
                      sprite: z.object({
                        id: z.number().int().default(0),
                        name: z.string().default("Definition"),
                        ref_type: z.literal("Definition").default("Definition"),
                        image: z.object({
                          id: z.number().int().default(0),
                          name: z.string().default("Definition"),
                          ref_type: z
                            .literal("Definition")
                            .default("Definition"),
                          graphic: z.number().int(),
                          turnable: z.boolean(),
                          clickable: z.boolean(),
                          use_full_iscript: z.boolean(),
                          draw_if_cloaked: z.boolean(),
                          draw_function: z.number().int(),
                          remapping: z.number().int(),
                          iscript_id: z.number().int(),
                          shield_overlay: z.number().int(),
                          attack_overlay: z.number().int(),
                          damage_overlay: z.number().int(),
                          special_overlay: z.number().int(),
                          landing_dust_overlay: z.number().int(),
                          lift_off_overlay: z.number().int(),
                        }),
                        health_bar_id: z.union([z.number().int(), z.null()]),
                        selection_circle_image_id: z.union([
                          z.number().int(),
                          z.null(),
                        ]),
                        selection_circle_offset: z.union([
                          z.number().int(),
                          z.null(),
                        ]),
                      }),
                      top_speed: z.number().int(),
                      acceleration: z.number().int(),
                      halt_distance: z.number().int(),
                      turn_radius: z.number().int(),
                      unused: z.number().int(),
                      move_control: z.number().int(),
                    }),
                    subunit1: z.number().int(),
                    subunit2: z.number().int(),
                    infestation: z.union([z.number().int(), z.null()]),
                    construction_animation: z.number().int(),
                    unit_direction: z.number().int(),
                    portrait: z.number().int(),
                    label: z.number().int(),
                  }),
                  stats: z.object({
                    name: z.string().default("Unit Status"),
                    hit_points: z.object({
                      current: z.number().int().gte(0).default(0),
                      max: z.number().int().gte(0).default(0),
                    }),
                    shield_enable: z.boolean(),
                    shield_points: z.object({
                      current: z.number().int().gte(0).default(0),
                      max: z.number().int().gte(0).default(0),
                    }),
                    energy_points: z.object({
                      current: z.number().int().gte(0).default(0),
                      max: z.number().int().gte(0).default(0),
                    }),
                    armor_points: z.number().int().lt(256).default(0),
                    armor_upgrade: z.number().int(),
                    rank: z.number().int(),
                    elevation_level: z.number().int(),
                  }),
                  weapons: z.object({
                    ground_weapon: z.union([
                      z.object({
                        id: z.number().int().default(0),
                        name: z.string().default("Definition"),
                        ref_type: z.literal("Definition").default("Definition"),
                        damage: z.object({
                          amount: z.number().int().gte(0).lte(65536),
                          bonus: z.number().int().gte(0).lte(65536),
                          factor: z.number().int(),
                        }),
                        bullet: z.object({
                          behaviour: z.number().int(),
                          remove_after: z.number().int(),
                          attack_angle: z.number().int(),
                          launch_spin: z.number().int(),
                          x_offset: z.number().int(),
                          y_offset: z.number().int(),
                        }),
                        splash: z.object({
                          inner: z.number().int(),
                          medium: z.number().int(),
                          outer: z.number().int(),
                        }),
                        cooldown: z.number().int(),
                        upgrade: z.number().int(),
                        weapon_type: z.number().int(),
                        explosion_type: z.number().int(),
                        target_flags: z.number().int(),
                        error_message: z.number().int(),
                        icon: z.number().int(),
                        graphics: z.number().int(),
                      }),
                      z.null(),
                    ]),
                    max_ground_hits: z.number().int(),
                    air_weapon: z.union([
                      z.object({
                        id: z.number().int().default(0),
                        name: z.string().default("Definition"),
                        ref_type: z.literal("Definition").default("Definition"),
                        damage: z.object({
                          amount: z.number().int().gte(0).lte(65536),
                          bonus: z.number().int().gte(0).lte(65536),
                          factor: z.number().int(),
                        }),
                        bullet: z.object({
                          behaviour: z.number().int(),
                          remove_after: z.number().int(),
                          attack_angle: z.number().int(),
                          launch_spin: z.number().int(),
                          x_offset: z.number().int(),
                          y_offset: z.number().int(),
                        }),
                        splash: z.object({
                          inner: z.number().int(),
                          medium: z.number().int(),
                          outer: z.number().int(),
                        }),
                        cooldown: z.number().int(),
                        upgrade: z.number().int(),
                        weapon_type: z.number().int(),
                        explosion_type: z.number().int(),
                        target_flags: z.number().int(),
                        error_message: z.number().int(),
                        icon: z.number().int(),
                        graphics: z.number().int(),
                      }),
                      z.null(),
                    ]),
                    max_air_hits: z.number().int(),
                    target_acquisition_range: z.number().int(),
                    sight_range: z.number().int(),
                    special_ability_flags: z.number().int(),
                  }),
                  ai: z.object({
                    name: z.string().default("Unit AI"),
                    computer_idle: z.number().int(),
                    human_idle: z.number().int(),
                    return_to_idle: z.number().int(),
                    attack_unit: z.number().int(),
                    attack_and_move: z.number().int(),
                    internal: z.number().int(),
                    right_click: z.number().int(),
                  }),
                  sound: z.object({
                    name: z.string().default("Unit Sound"),
                    ready: z.union([z.number().int(), z.null()]),
                    what_start: z.number().int(),
                    what_end: z.number().int(),
                    piss_start: z.union([z.number().int(), z.null()]),
                    piss_end: z.union([z.number().int(), z.null()]),
                    yes_start: z.union([z.number().int(), z.null()]),
                    yes_end: z.union([z.number().int(), z.null()]),
                  }),
                  size: z.object({
                    name: z.string().default("Unit Size"),
                    size_type: z.number().int(),
                    placement_box_size: z.object({
                      height: z.number().int(),
                      width: z.number().int(),
                    }),
                    bounds: z.object({
                      left: z.number().int(),
                      top: z.number().int(),
                      right: z.number().int(),
                      bottom: z.number().int(),
                    }),
                    addon_position: z.union([
                      z.object({
                        x: z.number().int().default(0),
                        y: z.number().int().default(0),
                      }),
                      z.null(),
                    ]),
                  }),
                  cost: z.object({
                    name: z.string().default("Unit Cost"),
                    cost: z.object({
                      mineral: z.number().int().gte(0).default(0),
                      gas: z.number().int().gte(0).default(0),
                      time: z.number().int().gte(0).default(0),
                    }),
                    build_score: z.number().int(),
                    destroy_score: z.number().int(),
                    is_broodwar: z.boolean(),
                    supply: z.object({
                      required: z.number().int(),
                      provided: z.number().int(),
                    }),
                    space: z.object({
                      required: z.number().int(),
                      provided: z.number().int(),
                    }),
                  }),
                })
                .describe("Definition of unit specification."),
              owner: z
                .object({
                  id: z.number().int().default(0),
                  name: z.string().default("Object"),
                  color: z.number().int(),
                  rgb_color: z.array(z.any()).min(3).max(3),
                  player_type: z.enum([
                    "Inactive",
                    "Computer (game)",
                    "Occupied By Human Player",
                    "Rescue",
                    "Unused",
                    "Computer",
                    "Human (Open Slot)",
                    "Neutral",
                    "Closed Slot",
                  ]),
                  race: z.enum([
                    "Zerg",
                    "Terran",
                    "Protoss",
                    "Invalid (Independant)",
                    "Invalid (Neutral)",
                    "User Selectable",
                    "Random",
                    "Inactive",
                  ]),
                  force: z.number().int().gte(0).lt(4).default(0),
                })
                .optional(),
              resource_amount: z.number().int().default(0),
              hangar: z.number().int().default(0),
              unit_state: z.number().int().default(0),
              relation_type: z.number().int().default(0),
              related_unit: z.number().int().default(0),
              special_properties: z.number().int().default(0),
              valid_properties: z.number().int().default(0),
            })
            .describe(
              "Unit placed on map.\n\nThe entity means what placeable on map, so every `Unit` which herit `Entity` is placed unit.\nIf you looking for specificaiton of unit like `Max HP`, `Size`, see `UnitDefinition`.",
            ),
          z
            .object({
              id: z.number().int().default(0),
              name: z.string().default("Object"),
              transform: z
                .object({
                  id: z.number().int().default(0),
                  name: z.string().default("Object"),
                  position: z.object({
                    x: z.number().int().default(0),
                    y: z.number().int().default(0),
                  }),
                  size: z.object({
                    left: z.number().int(),
                    top: z.number().int(),
                    right: z.number().int(),
                    bottom: z.number().int(),
                  }),
                })
                .describe("An entity component can have spatial data."),
              kind: z
                .enum(["Unit", "Sprite", "Location", "Tile", "Mask"])
                .default("Sprite"),
              owner: z.object({
                id: z.number().int().default(0),
                name: z.string().default("Object"),
                color: z.number().int(),
                rgb_color: z.array(z.any()).min(3).max(3),
                player_type: z.enum([
                  "Inactive",
                  "Computer (game)",
                  "Occupied By Human Player",
                  "Rescue",
                  "Unused",
                  "Computer",
                  "Human (Open Slot)",
                  "Neutral",
                  "Closed Slot",
                ]),
                race: z.enum([
                  "Zerg",
                  "Terran",
                  "Protoss",
                  "Invalid (Independant)",
                  "Invalid (Neutral)",
                  "User Selectable",
                  "Random",
                  "Inactive",
                ]),
                force: z.number().int().gte(0).lt(4).default(0),
              }),
              flags: z.number().int(),
              definition: z.object({
                id: z.number().int().default(0),
                name: z.string().default("Definition"),
                ref_type: z.literal("Definition").default("Definition"),
                image: z.object({
                  id: z.number().int().default(0),
                  name: z.string().default("Definition"),
                  ref_type: z.literal("Definition").default("Definition"),
                  graphic: z.number().int(),
                  turnable: z.boolean(),
                  clickable: z.boolean(),
                  use_full_iscript: z.boolean(),
                  draw_if_cloaked: z.boolean(),
                  draw_function: z.number().int(),
                  remapping: z.number().int(),
                  iscript_id: z.number().int(),
                  shield_overlay: z.number().int(),
                  attack_overlay: z.number().int(),
                  damage_overlay: z.number().int(),
                  special_overlay: z.number().int(),
                  landing_dust_overlay: z.number().int(),
                  lift_off_overlay: z.number().int(),
                }),
                health_bar_id: z.union([z.number().int(), z.null()]),
                selection_circle_image_id: z.union([
                  z.number().int(),
                  z.null(),
                ]),
                selection_circle_offset: z.union([z.number().int(), z.null()]),
              }),
            })
            .describe("Placed Sprite Entity."),
          z.null(),
        ])
        .default(null),
    }),
  ),
});
export type Usemap = z.infer<typeof UsemapSchema>;
